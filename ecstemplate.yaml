AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Deployment with Fargate, Auto-Scaling, and Blue/Green Deployment using Parameter Store

Parameters:
  VPCId:
    Type: String
    Description: VPC ID from vpc-template.yaml
  PrivateSubnet1Id:
    Type: String
    Description: Private Subnet 1 ID from vpc-template.yaml
  PrivateSubnet2Id:
    Type: String
    Description: Private Subnet 2 ID from vpc-template.yaml
  ALBSecurityGroupId:
    Type: String
    Description: ALB Security Group ID from vpc-template.yaml
  ALBListenerArn:
    Type: String
    Description: ALB Listener ARN from vpc-template.yaml
  ECRImageUri:
    Type: String
    Description: Full URI of the ECR image
    Default: public.ecr.aws/k8g5g0y1/my-springboot-app:awsweek5project

Resources:
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: MyECSCluster
      Tags:
        - Key: Name
          Value: MyECSCluster

  # IAM Role for ECS Task Execution with Parameter Store and S3 Access
  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ParameterStoreAndS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Allow access to SSM Parameter Store
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                  - ssm:GetParameter
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/my-springboot-app/*"
              # Allow KMS decryption (if parameters are encrypted)
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource: '*'  # Replace with specific KMS key ARN if known
              # Allow S3 access for the bucket
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::{{resolve:ssm:/my-springboot-app/aws.s3-bucket}}"
                  - !Sub "arn:aws:s3:::{{resolve:ssm:/my-springboot-app/aws.s3-bucket}}/*"
      Tags:
        - Key: Name
          Value: ECSExecutionRole

  # CloudWatch Log Group for ECS Tasks
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/my-springboot-app
      RetentionInDays: 7

  # ECS Task Definition with Parameter Store References
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: my-springboot-app
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      ContainerDefinitions:
        - Name: springboot-app
          Image: !Ref ECRImageUri
          PortMappings:
            - ContainerPort: 8080
          Essential: true
          Environment:
            - Name: aws.s3-bucket
              Value: !Sub "{{resolve:ssm:/my-springboot-app/aws.s3-bucket}}"
          Secrets:
            - Name: aws.access-key
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/my-springboot-app/aws.access-key"
            - Name: aws.secret-key
              ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/my-springboot-app/aws.secret-key"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/my-springboot-app
              awslogs-region: us-east-1
              awslogs-stream-prefix: ecs

  # ECS Security Group
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref ALBSecurityGroupId
      Tags:
        - Key: Name
          Value: ECSSecurityGroup

  # ALB Target Group 1 (Blue)
  TargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPCId
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      HealthCheckPath: /
      Tags:
        - Key: Name
          Value: MyTargetGroup1

  # ALB Target Group 2 (Green)
  TargetGroup2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPCId
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      HealthCheckPath: /
      Tags:
        - Key: Name
          Value: MyTargetGroup2

  # ALB Listener Rule
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListenerArn
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values: ['/*']
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup1

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListenerRule
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: MySpringBootService
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      DeploymentController:
        Type: CODE_DEPLOY
      LoadBalancers:
        - ContainerName: springboot-app
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup1  # Use TargetGroup1 initially
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet1Id
            - !Ref PrivateSubnet2Id
          SecurityGroups:
            - !Ref ECSSecurityGroup
      HealthCheckGracePeriodSeconds: 60

  # Auto-Scaling Target
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 4
      MinCapacity: 2
      ResourceId: !Sub service/${ECSCluster}/${ECSService.Name}
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # Auto-Scaling Policy
  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: CPUScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

Outputs:
  ECSClusterName:
    Value: !Ref ECSCluster
    Description: Name of the ECS Cluster
  ECSServiceName:
    Value: !Ref ECSService
    Description: Name of the ECS Service
  TargetGroup1Arn:
    Value: !Ref TargetGroup1
    Description: ARN of the First Target Group for CodeDeploy
  TargetGroup2Arn:
    Value: !Ref TargetGroup2
    Description: ARN of the Second Target Group for CodeDeploy
  TaskDefinitionArn:
    Value: !Ref ECSTaskDefinition
    Description: ARN of the Task Definition